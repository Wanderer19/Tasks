use Test::Simple tests => 33; 
use labyrinth;

my $Test1 = new labyrinth ([ [1,1,1,1,1],
							 [1,0,1,0,1],
							 [1,0,0,0,1],
							 [1,0,1,0,1],
							 [1,0,0,0,1],
							 [1,1,1,1,1] 
							], 1, 1, 1, 3, 0);
my $Test2 = new labyrinth ([ [1,1,1,1,1],
							 [1,0,1,0,1],
							 [1,1,0,0,1],
							 [1,0,1,0,1],
							 [1,0,0,0,1],
							 [1,1,1,1,1] 
							], 1, 1, 1, 3, 0);							
my $Test3 = new labyrinth ([ [1,1,1,1,1],
							 [1,0,1,0,1],
							 [1,1,0,0,1],
							 [1,0,1,0,1],
							 [1,0,0,0,1],
							 [1,1,1,1,1] 
							], 1, 1, 1, 3, 1);
my $Test4 = new labyrinth ([ [1,1,1,1,1],
                             [1,0,1,0,1],
                             [1,1,0,0,1],
                             [1,0,1,0,1],
                             [1,0,0,0,1],
                             [1,1,1,1,1] 
							], 3, 1, 1, 3, 1);							
my $Test5 = new labyrinth ([ [0,1,1,1,1,1],
							 [0,1,1,0,1,0],
                             [0,1,0,0,1,0],
                             [0,0,0,0,1,0],
                             [0,0,0,0,0,0] 
							], 1, 5, 0, 0, 1);
my $Test6 = new labyrinth ([ [0,1,1,1,1,1],
							 [0,1,1,0,1,0],
                             [0,1,0,0,1,0],
                             [0,0,0,0,1,0],
                             [0,0,0,0,0,0] 
							], 1, 5, 0, 0, 3);
my $Test7 = new labyrinth ([ [0,1,1,1,1,1],
							 [0,1,1,0,1,0],
                             [0,1,0,0,1,0],
                             [0,0,0,0,1,0],
                             [0,0,0,0,0,0] 
							], 1, 5, 0, 0, 2);
my $Test8 = new labyrinth ([ [0,1,1,1,1,1],
							 [0,1,1,0,1,0],
                             [0,1,0,0,1,0],
                             [0,0,0,0,1,0],
                             [0,0,0,0,0,0] 
							], 1, 5, 0, 0, 0);

my $Test9 = new labyrinth ([ [1,0,0,1,0,1,0,0,1,1],
							 [1,1,0,0,1,1,0,0,1,0],
							 [1,0,1,1,0,1,1,0,1,0],
							 [0,0,0,1,0,0,1,0,0,0],
							 [0,0,0,1,1,0,0,0,0,0],
                             [1,0,0,1,0,0,0,1,1,0],
							 [0,1,0,1,1,0,0,0,0,0],
							 [1,1,0,0,1,0,1,1,1,0],
							 [0,1,0,0,0,0,0,0,0,1],
							 [0,0,0,1,1,1,0,0,1,1]
							], 3, 0, 1, 9, 2);
my $Test10 = new labyrinth ([ [1,1,1,1,1,1,1,1,1,1],
							  [1,1,1,1,1,1,1,1,1,0],
							  [1,1,1,1,1,1,1,1,1,1],
							  [0,1,1,1,1,1,1,1,1,1],
							  [1,1,1,1,1,1,1,1,1,1],
							  [1,1,1,1,1,1,1,1,1,1],
							  [1,1,1,1,1,1,1,1,1,1],
							  [1,1,1,1,1,1,1,1,1,1],
							  [1,1,1,1,1,1,1,1,1,1],
							  [1,1,1,1,1,1,1,1,1,1]
							], 3, 0, 1, 9, 0);
my $Test11 = new labyrinth ([ [1,1,1,1,1,1,1,1,1,1],
							  [1,1,1,1,1,1,1,1,1,0],
							  [1,1,1,1,1,1,1,1,1,1],
							  [0,1,1,1,1,1,1,1,1,1],
							  [1,1,1,1,1,1,1,1,1,1],
							  [1,1,1,1,1,1,1,1,1,1],
							  [1,1,1,1,1,1,1,1,1,1],
							  [1,1,1,1,1,1,1,1,1,1],
							  [1,1,1,1,1,1,1,1,1,1],
							  [1,1,1,1,1,1,1,1,1,1]
							], 3, 0, 1, 9, 100);
my $Test12 = new labyrinth ([[1,0,0,1,0,1,0,0,1,1],
							 [1,1,0,0,1,1,0,0,1,0],
							 [1,0,1,1,0,1,1,0,1,0],
							 [0,0,0,1,0,0,1,0,0,0],
							 [0,0,0,1,1,0,0,0,0,0],
                             [1,0,0,1,0,0,0,1,1,0],
							 [0,1,0,1,1,0,0,0,0,0],
							 [1,1,0,0,1,0,1,1,1,0],
							 [0,1,0,0,0,0,0,0,0,1],
							 [0,0,0,1,1,1,0,0,1,1]
							], 1,9,3,0,1);
my $Test13 = new labyrinth ([[1,1,1,1,1,1,1,1],
							  [1,0,0,0,1,1,1,1],
							  [1,0,1,0,1,1,1,1],
							  [1,0,1,0,1,1,1,1],
							  [1,0,1,0,1,1,1,1],
							  [0,0,1,0,0,1,1,0],
							  [1,1,1,1,1,1,1,1]
							], 5, 0, 5, 7, 2);

my $Test14 = new labyrinth ([[1,1,1,1,1,1,1,1],
							 [1,0,0,0,1,1,1,1],
							 [1,0,1,0,1,1,1,1],
							 [1,0,1,0,1,1,1,1],
							 [1,0,1,0,1,1,1,1],
							 [0,0,1,0,0,1,1,0],
							 [1,1,1,1,1,1,1,1]
							], 5, 7, 5, 0, 2);

my $Test15 = new labyrinth ([[1,1,1,1,1,1,1,1],
							 [1,0,0,0,1,1,1,1],
							 [1,0,1,0,1,1,1,1],
							 [1,0,1,0,1,1,1,1],
							 [1,0,1,0,1,1,1,1],
							 [0,0,1,0,0,1,1,0],
							 [1,1,1,1,1,1,1,1]
							], 5, 7, 5, 0, 0);
							
my $Test16 = new labyrinth ([[1,0,1,1,1,1,1,1,1,1,1,1,1],
							 [1,0,1,1,1,1,0,0,0,0,0,1,1],
							 [1,0,1,1,1,1,0,1,1,1,0,1,1],
							 [1,0,0,0,0,1,0,1,0,1,0,1,1],
							 [1,1,1,1,0,1,0,0,0,1,0,1,1],
							 [1,1,1,1,0,1,1,1,1,1,0,1,1],
							 [1,1,1,1,0,0,0,0,1,1,0,1,1],
							 [1,1,1,1,1,1,1,0,1,1,0,1,1],
							 [1,1,1,1,1,1,1,0,1,1,0,1,1],
							 [1,1,1,1,1,1,1,0,1,1,0,1,1],
							 [1,1,1,1,1,1,1,0,0,0,0,1,1],
							 [1,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,1,1,1,1,1,1,1,1,1,1,1,1]
							], 0, 1, 3, 8, 0);
							
my $Test17 = new labyrinth ([[1,0,1,1,1,1,1,1,1,1,1,1,1],
							 [1,0,1,1,1,1,0,0,0,0,0,1,1],
							 [1,0,1,1,1,1,0,1,1,1,0,1,1],
							 [1,0,0,0,0,1,0,1,0,1,0,1,1],
							 [1,1,1,1,0,1,0,0,0,1,0,1,1],
							 [1,1,1,1,0,1,1,1,1,1,0,1,1],
							 [1,1,1,1,0,0,0,0,1,1,0,1,1],
							 [1,1,1,1,1,1,1,0,1,1,0,1,1],
							 [1,1,1,1,1,1,1,0,1,1,0,1,1],
							 [1,1,1,1,1,1,1,0,1,1,0,1,1],
							 [1,1,1,1,1,1,1,0,0,0,0,1,1],
							 [1,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,1,1,1,1,1,1,1,1,1,1,1,1]
							], 0, 1, 3, 8, 1);
							
my $Test18 = new labyrinth ([[1,0,1,1,1,1,1,1,1,1,1,1,1],
							 [1,0,1,1,1,1,0,0,0,0,0,1,1],
							 [1,0,1,1,1,1,0,1,1,1,0,1,1],
							 [1,0,0,0,0,1,0,1,0,1,0,1,1],
							 [1,1,1,1,0,1,0,0,0,1,0,1,1],
							 [1,1,1,1,0,1,1,1,1,1,0,1,1],
							 [1,1,1,1,0,0,0,0,1,1,0,1,1],
							 [1,1,1,1,1,1,1,0,1,1,0,1,1],
							 [1,1,1,1,1,1,1,0,1,1,0,1,1],
							 [1,1,1,1,1,1,1,0,1,1,0,1,1],
							 [1,1,1,1,1,1,1,0,0,0,0,1,1],
							 [1,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,1,1,1,1,1,1,1,1,1,1,1,1]
							], 0, 1, 3, 8, 2);
							
my $Test19 = new labyrinth ([[1,0,1,1,1,1,1,1,1,1,1,1,1],
							 [1,0,1,1,1,1,0,0,0,0,0,1,1],
							 [1,0,1,1,1,1,0,1,1,1,0,1,1],
							 [1,0,0,0,0,1,0,1,0,1,0,1,1],
							 [1,1,1,1,0,1,0,0,0,1,0,1,1],
							 [1,1,1,1,0,1,1,1,1,1,0,1,1],
							 [1,1,1,1,0,0,1,0,1,1,0,1,1],
							 [1,1,1,1,1,1,1,0,1,1,0,1,1],
							 [1,1,1,1,1,1,1,0,1,1,0,1,1],
							 [1,1,1,1,1,1,1,0,1,1,0,1,1],
							 [1,1,1,1,1,1,1,0,0,0,0,1,1],
							 [1,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,1,1,1,1,1,1,1,1,1,1,1,1]
							], 0, 1, 3, 8, 0);
							
my $Test20 = new labyrinth ([[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], 
							 [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1], 
							 [1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1], 
							 [1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1], 
							 [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],  
							 [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],  
							 [1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
							 [1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0], 
							 [1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0],
							 [1,0,1,1,1,1,1,0,1,1,0,0,0,0,1,1,0],
							 [1,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,0],
							 [1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0],
							 [1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0],
							 [1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0],
							 [1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1],
							 [1,0,1,0,0,0,0,1,0,1,0,1,1,1,1,1,1],
							 [1,0,1,0,1,1,0,1,0,1,0,1,1,1,1,1,1],
							 [1,0,1,0,1,1,0,0,0,1,0,1,1,1,1,1,1],
							 [1,0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1],
							 [1,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
							 [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
							], 26, 1, 0, 0, 0);
							
my $Test21 = new labyrinth ([[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], 
							 [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1], 
							 [1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1], 
							 [1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1], 
							 [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],  
							 [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],  
							 [1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
							 [1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0], 
							 [1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0],
							 [1,0,1,1,1,1,1,0,1,1,0,0,0,0,1,1,0],
							 [1,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,0],
							 [1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0],
							 [1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0],
							 [1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0],
							 [1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1],
							 [1,0,1,0,0,0,0,1,0,1,0,1,1,1,1,1,1],
							 [1,0,1,0,1,1,0,1,0,1,0,1,1,1,1,1,1],
							 [1,0,1,0,1,1,0,0,0,1,0,1,1,1,1,1,1],
							 [1,0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1],
							 [1,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
							 [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
							], 26, 1, 0, 0, 6);
							
my $Test22 = new labyrinth ([[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1], 
							 [0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1], 
							 [1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1], 
							 [1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1], 
							 [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],  
							 [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],  
							 [1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
							 [1,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0], 
							 [1,0,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0],
							 [1,0,1,1,1,1,1,0,1,1,0,0,0,0,1,1,0],
							 [1,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,0],
							 [1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0],
							 [1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0],
							 [1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,1],
							 [1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1],
							 [1,0,1,0,0,0,0,1,0,1,0,1,1,1,1,1,1],
							 [1,0,1,0,1,1,0,1,0,1,0,1,1,1,1,1,1],
							 [1,0,1,0,1,1,0,0,0,1,0,1,1,1,1,1,1],
							 [1,0,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1],
							 [1,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
							 [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
							 [1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
							], 26, 1, 0, 0, 0);

my $Test23 = new labyrinth ([[1,0,0,0,0,0,0], 
							 [1,0,1,1,1,1,0],
							 [0,0,1,1,1,0,0], 
							 [0,1,0,1,0,0,1],
							 [0,0,0,1,0,1,1],
							 [1,1,1,1,1,1,1]
							], 3, 2, 4, 4, 0);
							
my $Test24 = new labyrinth ([[1,0,0,0,0,0,0], 
							 [1,0,1,1,1,1,0],
							 [0,0,1,1,1,0,0], 
							 [0,1,0,1,0,0,1],
							 [0,0,0,1,0,1,1],
							 [1,1,1,1,1,1,1]
							], 3, 2, 4, 4, 5);
							
my $Test25 = new labyrinth ([[1,0,0,0,0,0,0], 
							 [1,0,1,1,1,1,0],
							 [0,0,1,1,1,0,0], 
							 [0,1,0,1,1,0,1],
							 [0,0,1,1,0,1,1],
							 [1,1,1,1,1,1,1]
							], 3, 2, 4, 4, 1);   							
my $Test26 = new labyrinth ([[1,0,0,0,0,0,0], 
							 [1,0,1,1,1,1,0],
							 [0,0,1,1,1,0,0], 
							 [0,1,0,1,1,0,1],
							 [0,0,1,1,0,1,1],
							 [1,1,1,1,1,1,1]
							], 3, 2, 4, 4, 2);
							
my $Test27 = new labyrinth ([[1,1,1,1,1,1,1,1,1,1],
							 [1,1,1,1,0,0,0,0,0,1],
							 [1,1,1,1,0,1,1,1,0,1],
							 [1,1,1,1,0,1,1,1,0,1],
							 [0,0,0,0,0,1,1,1,0,1],
							 [1,1,1,1,1,1,1,1,0,1],
							 [1,1,1,1,1,1,0,0,0,1],
							 [1,1,1,1,1,1,0,1,1,1],
							 [1,1,1,1,0,0,0,1,1,1],
							 [1,1,1,1,0,1,1,1,1,1]
							], 9, 4, 4, 0, 0);

my $Test28 = new labyrinth ([[1,1,1,1,1,1,1,1,1,1],
							 [1,1,1,1,0,0,0,0,0,1],
							 [1,1,1,1,0,1,1,1,0,1],
							 [1,1,1,1,0,1,1,1,0,1],
							 [0,0,0,0,0,1,1,1,0,1],
							 [1,1,1,1,1,1,1,1,0,1],
							 [1,1,1,1,1,1,0,0,0,1],
							 [1,1,1,1,1,1,0,1,1,1],
							 [1,1,1,1,0,0,0,1,1,1],
							 [1,1,1,1,0,1,1,1,1,1]
							], 9, 4, 4, 0, 2);
							
my $Test29 = new labyrinth ([[1,1,1,1,1,1,1,1,1,1],
							 [1,1,1,1,0,0,0,0,0,1],
							 [1,1,1,1,0,1,1,1,0,1],
							 [1,1,1,1,0,1,1,1,0,1],
							 [0,0,0,0,0,1,1,1,0,1],
							 [1,1,1,1,1,1,1,1,0,1],
							 [1,1,1,1,1,1,0,0,0,1],
							 [1,1,1,1,1,1,0,1,1,1],
							 [1,1,1,1,0,0,0,1,1,1],
							 [1,1,1,1,0,1,1,1,1,1]
							], 9, 4, 4, 0, 3);

my $Test30 = new labyrinth ([[1,1,1,1,1,1,1,1,1,1],
							 [1,1,1,1,0,0,0,0,0,1],
							 [1,1,1,1,0,1,1,1,0,1],
							 [1,1,1,1,0,1,1,1,1,1],
							 [0,0,0,0,1,1,1,1,0,1],
							 [1,1,1,1,1,1,1,1,0,1],
							 [1,1,1,1,1,1,0,0,0,1],
							 [1,1,1,1,1,1,0,1,1,1],
							 [1,1,1,1,0,0,0,1,1,1],
							 [1,1,1,1,0,1,1,1,1,1]
							], 9, 4, 4, 0, 3);	
							
my $Test31 = new labyrinth ([[1,1,1,1,1,1,1,1,1,1],
							 [1,1,1,1,0,0,0,0,0,1],
							 [1,1,1,1,0,1,1,1,0,1],
							 [1,1,1,1,0,1,1,1,1,1],
							 [0,0,0,0,1,1,1,1,0,1],
							 [1,1,1,1,1,1,1,1,0,1],
							 [1,1,1,1,1,1,0,0,0,1],
							 [1,1,1,1,1,1,0,1,1,1],
							 [1,1,1,1,0,0,0,1,1,1],
							 [1,1,1,1,0,1,1,1,1,1]
							], 9, 4, 4, 0, 4);
							
my $Test32 = new labyrinth ([[1,1,1,1,1,1,1,1,1,1],
							 [1,1,1,1,0,0,0,0,0,1],
							 [1,1,1,1,0,1,1,1,0,1],
							 [1,1,1,1,1,1,1,1,1,1],
							 [0,1,0,1,1,1,1,1,0,1],
							 [1,1,1,1,1,1,1,1,0,1],
							 [1,1,1,1,1,1,0,0,0,1],
							 [1,1,1,1,1,1,0,1,1,1],
							 [1,1,1,1,0,0,0,1,1,1],
							 [1,1,1,1,0,1,1,1,1,1]
							], 9, 4, 4, 0, 4);	

my $Test33 = new labyrinth ([[0,0,0,0,0],
							 [0,0,0,0,0],
							 [0,0,0,0,0],
							 [0,0,0,0,0],
							 [0,0,0,0,0]
							], 0, 0, 3, 2, 0);
							
ok (check ($Test1, $Test1->GetThePath(), 5));
ok (check ($Test2, $Test2->GetThePath(), 0));
ok (check ($Test3, $Test3->GetThePath(), 3));
ok (check ($Test4, $Test4->GetThePath(), 5));
ok (check ($Test5, $Test5->GetThePath(), 11));
ok (check ($Test6, $Test6->GetThePath(), 7));
ok (check ($Test7, $Test7->GetThePath(), 9));
ok (check ($Test8, $Test8->GetThePath(), 13));
ok (check ($Test9, $Test9->GetThePath(), 12));
ok (check ($Test10, $Test10->GetThePath(), 0));
ok (check ($Test11, $Test11->GetThePath(), 12));
ok (check ($Test12, $Test12->GetThePath(), 14));
ok (check ($Test13, $Test13->GetThePath(), 16));
ok (check ($Test14, $Test14->GetThePath(), 16));
ok (check ($Test15, $Test15->GetThePath(), 0));
ok (check ($Test16, $Test16->GetThePath(), 39));
ok (check ($Test17, $Test17->GetThePath(), 13));
ok (check ($Test18, $Test18->GetThePath(), 11));
ok (check ($Test19, $Test19->GetThePath(), 0));
ok (check ($Test20, $Test20->GetThePath(), 122));
ok (check ($Test21, $Test21->GetThePath(), 28));
ok (check ($Test22, $Test22->GetThePath(), 0));
ok (check ($Test23, $Test23->GetThePath(), 20));
ok (check ($Test24, $Test24->GetThePath(), 4));
ok (check ($Test25, $Test25->GetThePath(), 0));
ok (check ($Test26, $Test26->GetThePath(), 4));
ok (check ($Test27, $Test27->GetThePath(), 24));
ok (check ($Test28, $Test28->GetThePath(), 24));
ok (check ($Test29, $Test29->GetThePath(), 10));
ok (check ($Test30, $Test30->GetThePath(), 24));
ok (check ($Test31, $Test31->GetThePath(), 10));
ok (check ($Test32, $Test32->GetThePath(), 0));
ok (check ($Test33, $Test33->GetThePath(), 6));

sub check{
	my ($Labyrinth, $Path, $ExpectedLength) = @_;
	my @Maze = @{$Labyrinth->{labyrinth}};
	return 1 if (@$Path == 0 &&  $ExpectedLength == 0);
	return 0 unless (@$Path == $ExpectedLength);
	
	return 0 unless ($$Path[0][0] == $Labyrinth->{enter1} &&  $$Path[0][1] == $Labyrinth->{enter2});
	return 0 unless ($$Path[-1][0] == $Labyrinth->{exit1} &&  $$Path[-1][1] == $Labyrinth->{exit2});
	return 0 unless (NeighboringCells ($Path));
        return 0 unless (WithinLabyrinth ($Path, @Maze+0, @{$Maze[0]}+0));
	
	my $CounterBombs = $Labyrinth->{bombs};
	for my $i (@$Path){
		$CounterBombs-- if ($Maze[$$i[0]][$$i[1]] == 1);
	}
	
	return 0 if ($CounterBombs < 0);
	return 1;
}

sub NeighboringCells{
    my $ListOfCells = shift;

    for ($i = 0; $i<scalar(@$ListOfCells)-1; ++$i){
	return 0 unless (abs ($$ListOfCells[$i][0]+$$ListOfCells[$i][1]-$$ListOfCells[$i+1][0]-$$ListOfCells[$i+1][1]) == 1)
    }
		
    return 1;
}

sub WithinLabyrinth{
    my ($ListOfCells, $Rows, $Columns) = @_;
    
    for (@$ListOfCells){
        return 0 if ($$_[0] < 0 || $$_[0] > $Rows);
        return 0 if ($$_[1] < 0 || $$_[1] > $Columns);
    }
    
    return 1;
}
		
		
		